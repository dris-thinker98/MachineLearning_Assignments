# -*- coding: utf-8 -*-
"""ML_A6_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Ah7y5_IRVHk-PXL8FilJbcoQpJYw6bM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.datasets import cifar10

# load dataset
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

from keras.utils import to_categorical
#one-hot encode target column
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

y_train[0]

"""# **Answer to Q1**"""

from keras.models import Sequential
from keras.layers import ZeroPadding2D, Conv2D, BatchNormalization, MaxPooling2D, Dense, Flatten

#creating model#1
model = Sequential()
model.add(ZeroPadding2D(padding=1, input_shape=(32,32,3)))
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(10,activation='softmax'))

"""# **Answer to Q2**"""

model.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])

"""Model based on the original architecture"""

model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)

"""# **Answer to Q3(a)**

Without BatchNormalization Layer
"""

model1 = Sequential()
model1.add(ZeroPadding2D(padding=1, input_shape=(32,32,3)))
model1.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model1.add(MaxPooling2D((2, 2)))
model1.add(Flatten())
model1.add(Dense(10,activation='softmax'))

model1.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])

model1.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)

"""# **Answer to Q3(b)**

Two Dense Layers
"""

model2 = Sequential()
model2.add(ZeroPadding2D(padding=1, input_shape=(32,32,3)))
model2.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model2.add(BatchNormalization())
model2.add(MaxPooling2D((2, 2)))
model2.add(Flatten())
model2.add(Dense(64,activation='softmax'))
model2.add(Dense(10,activation='softmax'))

model2.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])

model2.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)

"""# **Answer to Q3(c)**

2 blocks of Cov2D -> BatchNorm2D -> MaxPooling2D
"""

model3 = Sequential()
model3.add(ZeroPadding2D(padding=1, input_shape=(32,32,3)))
model3.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model3.add(BatchNormalization(axis = 1))
model3.add(MaxPooling2D((2, 2)))
model3.add(Conv2D(64, (3,3), activation='relu', kernel_initializer='he_uniform',padding='same'))
model3.add(BatchNormalization(axis = 1))
model3.add(MaxPooling2D((2, 2)))
model3.add(Flatten())
model3.add(Dense(10,activation='softmax'))

model3.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])

model3.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)

"""# **Answer to Q3(d)**

3 blocks of Cov2D -> BatchNorm2D -> MaxPooling2D
"""

model4 = Sequential()
model4.add(ZeroPadding2D(padding=1, input_shape=(32,32,3)))
model4.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model4.add(BatchNormalization(axis = 1))
model4.add(MaxPooling2D((2, 2)))
model4.add(Conv2D(64, (3,3), activation='relu', kernel_initializer='he_uniform',padding='same'))
model4.add(BatchNormalization(axis = 1))
model4.add(MaxPooling2D((2, 2)))
model4.add(Conv2D(128, (3,3), activation='relu', kernel_initializer='he_uniform',padding='same'))
model4.add(BatchNormalization(axis = 1))
model4.add(MaxPooling2D((2, 2)))
model4.add(Flatten())
model4.add(Dense(10,activation='softmax'))

model4.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])

history = model4.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)

model4.save("A6_best_model")

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model4.summary()

