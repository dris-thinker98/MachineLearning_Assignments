# -*- coding: utf-8 -*-
"""ML_A2_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a-VfAuQVho6LJ5Dw4-vE8cuODOXb6H3A
"""

import pandas as pd
import scipy.io
from random import seed
from random import randrange
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib    #to save and load models
import sys
import os

from google.colab import drive
drive.mount('/content/drive')

data = scipy.io.loadmat('/content/drive/My Drive/ML/Assignment_2_datasets/dataset_1.mat')
print(data)

data1 = data['samples']
df = pd.DataFrame(data1)
labels = data['labels'].reshape(-1)
df['labels'] = labels
df

"""# **Answer to Q2(a)**"""

x=np.array(df[0])
y=np.array(df[1])
z=np.array(df['labels'])

classes=list(df['labels'].unique())
classes.sort()
print(classes)
classes= [str(i) for i in classes]
print(classes)

plt.figure(figsize=(10,8))
sc_plot=plt.scatter(x,y,c=z)
plt.title("Scatter plot on dataset_1.mat")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend(handles=sc_plot.legend_elements()[0],labels=classes)
plt.show()

"""# **Answer to Q2(b)**"""

from google.colab import drive
drive.mount('/content/drive')
location = "/content/drive/My Drive/Colab Notebooks"
sys.path.append(os.path.abspath(location))
from LogRegression import LogRegression

"""# **Answer to Q2(c)**"""

def nfold_split(data,num): #Here num is the number of splits to be done for the data
  chunk = list()
  dataset = data.values.tolist()
  fold_size = int(len(data)/num)
  for i in range(num):
    fold = list()
    while len(fold) < fold_size:
      index = randrange(len(dataset))
      fold.append(dataset.pop(index))
    chunk.append(fold)
  return chunk

from sklearn.metrics import accuracy_score
from sklearn.metrics import log_loss

LogReg = LogRegression()
joblib_file = "joblib_LogReg_Model1.pkl"  
joblib.dump(LogReg, joblib_file)

seed(1)
chunks = nfold_split(df, 5)
y_pred = 0
sample = []
acc = []
acc_sk = []
logloss = []
for i in range(5):
  df_train = pd.DataFrame()
  for j in range(5):
    if (j==i):
      df_test = pd.DataFrame(chunks[j])
    else:
      #train.append(chunks[j])
      data1 = pd.DataFrame()
      data1 = pd.DataFrame(chunks[j])
      df_train = df_train.append(data1, ignore_index=True)
  X_train = df_train.iloc[:,0:2]
  y_train = df_train.iloc[:,2:]
  X_test = df_test.iloc[:,0:2]
  y_test = df_test.iloc[:,2:]
  LogReg.fit(X_train, y_train)
  y_pred = LogReg.predict(X_test)
  y_test = np.array(y_test).reshape(-1)
  accuracy = accuracy_score(y_test, y_pred) * 100
  accuracy1 = np.sum(y_pred == y_test)/len(y_pred) * 100
  loss = log_loss(y_test, y_pred)
  sample.append(i)
  logloss.append(loss)
  acc.append(accuracy1)
  acc_sk.append(accuracy)

acc_df = pd.DataFrame()
acc_df['Sample No.'] = sample
acc_df['validation accuracy'] = acc
acc_df['validation acc_sklearn'] = acc_sk
acc_df['Validation LogLoss'] = logloss
acc_df

plt.plot(acc_df['Sample No.'], acc_df['validation acc_sklearn'], marker = 'o', label = 'validation accuracy')
plt.plot(acc_df['Sample No.'], acc_df['Validation LogLoss'], marker = 'o', label = 'validation loss')
plt.xlabel('Fold number')
plt.ylabel('Accuracy / Loss')
plt.legend()
plt.show()

seed(1)
chunks = nfold_split(df, 5)
y_pred = 0
sample2 = []
acc2 = []
acc_sk2 = []
logloss2 = []
for i in range(5):
  df_train = pd.DataFrame()
  for j in range(5):
    if (j==i):
      df_test = pd.DataFrame(chunks[j])
    else:
      #train.append(chunks[j])
      data1 = pd.DataFrame()
      data1 = pd.DataFrame(chunks[j])
      df_train = df_train.append(data1, ignore_index=True)
  X_train = df_train.iloc[:,0:2]
  y_train = df_train.iloc[:,2:]
  LogReg = LogRegression()
  LogReg.fit(X_train, y_train)
  y_pred = LogReg.predict(X_train)
  y_train = np.array(y_train).reshape(-1)
  accuracy = accuracy_score(y_train, y_pred) * 100
  accuracy1 = np.sum(y_pred == y_train)/len(y_pred) * 100
  loss = log_loss(y_train, y_pred)
  sample2.append(i)
  logloss2.append(loss)
  acc2.append(accuracy1)
  acc_sk2.append(accuracy)

acc_df['Training accuracy'] = acc2
acc_df['Training acc_sklearn'] = acc_sk2
acc_df['Training LogLoss'] = logloss2
acc_df

plt.plot(acc_df['Sample No.'], acc_df['Training acc_sklearn'], marker = 'o', label = 'Training accuracy')
plt.plot(acc_df['Sample No.'], acc_df['Training LogLoss'], marker = 'o', label = 'Training loss')
plt.xlabel('Fold number')
plt.ylabel('Accuracy / Loss')
plt.legend()
plt.show()

"""# **Answer to Q2(d)**"""

#location2 = "/content/drive/My Drive/Colab Notebooks/"
sys.path.append(os.path.abspath("/content/drive/My Drive/ML"))
from LogRegression2 import LogRegression

LogReg = LogRegression()

joblib_file = "joblib_LogReg_Model2.pkl"  
joblib.dump(LogReg, joblib_file)

seed(1)
chunks = nfold_split(df, 5)
acc_sk = []
logloss = []
lambdas = [0.0001, 0.001, 0.01, 0.02, 0.03]
ld = []
for l in lambdas:
  for i in range(5):
    df_train = pd.DataFrame()
    for j in range(5):
      if (j==i):
        df_test = pd.DataFrame(chunks[j])
      else:
        #train.append(chunks[j])
        data1 = pd.DataFrame()
        data1 = pd.DataFrame(chunks[j])
        df_train = df_train.append(data1, ignore_index=True)
    X_train = df_train.iloc[:,0:2]
    y_train = df_train.iloc[:,2:]
    X_test = df_test.iloc[:,0:2]
    y_test = df_test.iloc[:,2:]
    LogReg.fit(X_train, y_train, l)
    y_pred = LogReg.predict(X_test)
    y_test = np.array(y_test).reshape(-1)
    accuracy = accuracy_score(y_test, y_pred) * 100
    loss = log_loss(y_test, y_pred)
    sample.append(i)
    logloss.append(loss)
    acc_sk.append(accuracy)
    ld.append(l)

lambda_df = pd.DataFrame()
lambda_df['Lambda Value'] = ld
lambda_df['Validation Accuracy'] = acc_sk
lambda_df['Validation loss'] = logloss
lambda_df

plt.plot(range(25), lambda_df['Validation Accuracy'], marker = 'o', label = 'Validation Accuracy')
plt.plot(range(25), lambda_df['Validation loss'], marker = 'o', label = 'Validation Loss')
plt.legend()
plt.show()

seed(1)
chunks = nfold_split(df, 5)
acc_sk2 = []
logloss2 = []
lambdas = [0.0001, 0.001, 0.01, 0.02, 0.03]
ld = []
for l in lambdas:
  for i in range(5):
    df_train = pd.DataFrame()
    for j in range(5):
      if (j==i):
        df_test = pd.DataFrame(chunks[j])
      else:
        #train.append(chunks[j])
        data1 = pd.DataFrame()
        data1 = pd.DataFrame(chunks[j])
        df_train = df_train.append(data1, ignore_index=True)
    X_train = df_train.iloc[:,0:2]
    y_train = df_train.iloc[:,2:]
    LogReg = LogRegression()
    LogReg.fit(X_train, y_train, l)
    y_pred = LogReg.predict(X_train)
    y_train = np.array(y_train).reshape(-1)
    accuracy = accuracy_score(y_train, y_pred) * 100
    loss = log_loss(y_train, y_pred)
    #sample.append(i)
    logloss2.append(loss)
    acc_sk2.append(accuracy)
    #ld.append(l)

lambda_df['Training Accuracy'] = acc_sk2
lambda_df['Training loss'] = logloss2
lambda_df

plt.plot(range(25), lambda_df['Training Accuracy'], marker = 'o', label = 'Training Accuracy')
plt.plot(range(25), lambda_df['Training loss'], marker = 'o', label = 'Training loss')
plt.legend()
plt.show()

"""# **Answer to Q2(e)**"""

from sklearn.linear_model import LogisticRegression

seed(1)
chunks = nfold_split(df, 5)
y_pred = 0
sample = []
acc = []
acc_sk = []
logloss = []
for i in range(5):
  df_train = pd.DataFrame()
  for j in range(5):
    if (j==i):
      df_test = pd.DataFrame(chunks[j])
    else:
      #train.append(chunks[j])
      data1 = pd.DataFrame()
      data1 = pd.DataFrame(chunks[j])
      df_train = df_train.append(data1, ignore_index=True)
  X_train = df_train.iloc[:,0:2]
  y_train = df_train.iloc[:,2:]
  y_train = np.array(y_train).reshape(-1)
  X_test = df_test.iloc[:,0:2]
  y_test = df_test.iloc[:,2:]
  LogRegn = LogisticRegression(penalty='l2', tol = 0.03, max_iter = 1000)
  LogRegn.fit(X_train, y_train)
  y_pred = LogRegn.predict(X_test)
  y_test = np.array(y_test).reshape(-1)
  accuracy = accuracy_score(y_test, y_pred) * 100
  accuracy1 = np.sum(y_pred == y_test)/len(y_pred) * 100
  loss = log_loss(y_test, y_pred)
  sample.append(i)
  logloss.append(loss)
  acc.append(accuracy1)
  acc_sk.append(accuracy)

df_sk = pd.DataFrame()
df_sk['Validation Accuracy (sklearn)'] = acc_sk
df_sk['Validation Log-loss (sklearn)'] = logloss
df_sk

seed(1)
chunks = nfold_split(df, 5)
y_pred = 0
sample = []
#acc = []
acc_sk2 = []
logloss2 = []
for i in range(5):
  df_train = pd.DataFrame()
  for j in range(5):
    if (j==i):
      df_test = pd.DataFrame(chunks[j])
    else:
      #train.append(chunks[j])
      data1 = pd.DataFrame()
      data1 = pd.DataFrame(chunks[j])
      df_train = df_train.append(data1, ignore_index=True)
  X_train = df_train.iloc[:,0:2]
  y_train = df_train.iloc[:,2:]
  y_train = np.array(y_train).reshape(-1)
  LogRegn = LogisticRegression(penalty='l2', tol = 0.03, max_iter = 1000)
  LogRegn.fit(X_train, y_train)
  y_pred = LogRegn.predict(X_train)
  y_train = np.array(y_train).reshape(-1)
  accuracy = accuracy_score(y_train, y_pred) * 100
  #accuracy1 = np.sum(y_pred == y_train)/len(y_pred) * 100
  loss = log_loss(y_train, y_pred)
  sample.append(i)
  logloss2.append(loss)
  #acc.append(accuracy1)
  acc_sk2.append(accuracy)

df_sk['Training Accuracy (sklearn)'] = acc_sk2
df_sk['Training Log-loss (sklearn)'] = logloss2
df_sk