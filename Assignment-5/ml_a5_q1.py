# -*- coding: utf-8 -*-
"""ML_A5_Q1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CYfHm1lOB6U1ETIBlgVNJhyoLFLViahA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.manifold import TSNE
from mpl_toolkits import mplot3d 
import time
from sklearn.neighbors import KNeighborsClassifier

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials


#authenticate
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

"""# **Answer to Q1(1)**"""

file_id = '1kS5B5bSakQAOpBFDiFx5gE6TCVpToahw'
downloaded = drive.CreateFile({'id': file_id})
downloaded.GetContentFile('Satellite.xlsx')

train = pd.read_excel('Satellite.xlsx',header=None)
train

time_start = time.time()
tsne = TSNE(n_components=2, verbose=1, perplexity=70, n_iter=250)
tsne_results = tsne.fit_transform(train.iloc[:,:-1])
print('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))

tsne_df=pd.DataFrame(tsne_results,columns=['a','b'])
labels=train.iloc[:,36]
tsne_df['labels']=labels

classes2=list(tsne_df['labels'].unique())
classes2.sort()
print(classes2)
classes2= [str(i) for i in classes2]
print(classes2)

fig=plt.figure(figsize=(10,10))
sc_plt2=plt.scatter(np.array(tsne_df['a']),np.array(tsne_df['b']),marker='o',c=np.array(tsne_df['labels']))
plt.title('Scatter plot of TSNE Data')
plt.legend(handles = sc_plt2.legend_elements()[0],labels = classes2)
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

#3d plot
time_start = time.time()
tsne = TSNE(n_components=3, verbose=1, perplexity=70, n_iter=250)
tsne_results = tsne.fit_transform(train.iloc[:,:-1])
print('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))

tsne_df1=pd.DataFrame(tsne_results,columns=['a','b','c'])
labels1=train.iloc[:,36]
tsne_df1['labels']=labels1

x = np.array(tsne_df1['a'])
y = np.array(tsne_df1['c'])
z = np.array(tsne_df1['c'])
fig=plt.figure(figsize=(15,10))
ax = plt.axes(projection ="3d") 
ax.scatter3D(x, y, z, c = np.array(tsne_df1['labels']))
plt.title('3D Scatter plot of TSNE Data')
ax.set_xlabel('X-axis')  
ax.set_ylabel('Y-axis')  
ax.set_zlabel('Z-axis') 
plt.show()

"""# **Answer to Q1(2)**"""

X_train = train.iloc[:,:-1]
y_train = train.iloc[:,36]

file_id = '1vRnbE6_qh0lTBUTqpGff-TjmZicsk5lk'   #https://drive.google.com/file/d/1vRnbE6_qh0lTBUTqpGff-TjmZicsk5lk/view?usp=sharing
downloaded = drive.CreateFile({'id': file_id})
downloaded.GetContentFile('Sat_tst.xlsx')

test = pd.read_excel('Sat_tst.xlsx',header=None)
test

import os
import sys
from sklearn.model_selection import GridSearchCV

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

location = "/content/drive/MyDrive/ML/Assgn5"
sys.path.append(os.path.abspath(location))
from kNN import kNN

from sklearn.metrics import mean_squared_error

X_test = test.iloc[:,:-1]
y_test = test.iloc[:,36]

y_test

k_val = [1,2,3,4,5,6,7,8,9,10]
res = []
for i in k_val:
  knn = kNN(i)
  knn.fit(X_train,y_train)
  y_pred = knn.predict(np.array(X_test).transpose())
  error = mean_squared_error(np.array(y_test).reshape(-1),y_pred)
  res.append([i,error])

res_df = pd.DataFrame(res1)
res_df.rename(columns = {0:'k',
                         1:'Error'}, inplace = True) 
res_df

plt.plot(res_df['k'],res_df['Error'],marker = 'o')
plt.show()

"""# **Answer to Q1(3)**"""

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score

"""Sklearn Train and Validation Accuracy"""

clf = KNeighborsClassifier(n_neighbors = 5) 
clf.fit(X_train,y_train)
train_pred = clf.predict(X_train)
train_acc = accuracy_score(np.array(y_train).reshape(-1),train_pred)
train_acc

clf = KNeighborsClassifier(n_neighbors = 5) 
clf.fit(X_train,y_train)
test_pred = clf.predict(X_test)
test_acc = accuracy_score(np.array(y_test).reshape(-1),test_pred)
test_acc

"""Self-Implemented kNN Train and Validation Accuracy"""

knn2 = KNeighborsClassifier(5) 
knn2.fit(X_train,y_train)
train_pred = knn2.predict(X_train)
train_acc1 = accuracy_score(np.array(y_train).reshape(-1),train_pred)
train_acc1

#clf = KNeighborsClassifier(n_neighbors = 5) 
knn2.fit(X_train,y_train)
test_pred = knn2.predict(X_test)
test_acc1 = accuracy_score(np.array(y_test).reshape(-1),test_pred)
test_acc1

